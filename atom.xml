<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://youngitachi.github.io</id>
    <title>youngitachi</title>
    <updated>2019-06-29T15:23:32.633Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://youngitachi.github.io"/>
    <link rel="self" href="https://youngitachi.github.io/atom.xml"/>
    <subtitle>A little knowledge is a dangerous thing.</subtitle>
    <logo>https://youngitachi.github.io/images/avatar.png</logo>
    <icon>https://youngitachi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, youngitachi</rights>
    <entry>
        <title type="html"><![CDATA[LeetCode 11. Container With Most Water]]></title>
        <id>https://youngitachi.github.io/post/leetcode-11-container-with-most-water</id>
        <link href="https://youngitachi.github.io/post/leetcode-11-container-with-most-water">
        </link>
        <updated>2019-06-29T07:26:12.000Z</updated>
        <summary type="html"><![CDATA[<p>原题链接：<a href="https://leetcode.com/problems/container-with-most-water/">11. Container With Most Water</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>原题链接：<a href="https://leetcode.com/problems/container-with-most-water/">11. Container With Most Water</a></p>
<!-- more -->
<p>分析：</p>
<p>对于任意两个位置i, j(i &lt; j)，其能够盛的水量为：<code>area[i]\j] = (j - i) * min(height[i], height[j])</code>，而本题的意思实际上就是要找到所有值当中的最大值。
很明显，暴力求解，是O(n^2)的，而且思路很简单，既然此题不是easy难度的，估计不是用暴力求解的，虽然想了半天最后还是用了暴力，居然也过了，但是时间是超过1秒的，肯定是不行的，想要通过面试，必须要更快的算法。
这个题最终也没有在没有提示的情况下想到解法，故查看了tag：array，double pointers，第一个tag当然是废话，重要的是第二个tag，双指针，这个在2sum里面用到过，基本就是首尾两个指针，往中间进行夹逼。设首指针为i，尾指针为j，双指针的问题，最关键的就是要判断下一步到底该i++还是j--。而相比起暴力而言，我们这么做，会少算很多area，关键就在于，我们能保证，少算的这些area，在当前的状态下，已经能判断出不可能成为候选答案了。
这里在每一步的状态，我们能获取到的数据有height[i]，height[j]，还有当前的最大面积，以及当前的面积area[i][j]，因为我们是要求最大的值，所以我们需要根据当前的状态，来判断那些可能性已经可以被排除了。
从直观上来讲，我们想要让高度越高越好，那么体现在决策上就是，当height[i] &gt; height[j]时，j--，否则i++。下面我们需要证明这个决策确实是对的。
首先我们看看这种决策，究竟有啥性质。我们以height[i]&gt;height[j]为例进行说明
a. height[i]一定是目前来遍历过的高度中的最大值
b. 对于[0, i-1]中的每一个数m，[j, len - 1]中至少有一个n使得：<code>height[m] &lt; height[n]</code>
c. 对于[j+1, n-1]中的每一个数n，[0, i]中至少存在一个m使得：<code>height[n] &lt; height[m]</code>
这三个其实很容易被推导出来的，因为我们的决策是：高度更小的那一个指针进行移动，所以，如果一个指针移动了，说明指针另一边有比自己高的，而目前指针更高的一个，显然是目前来讲，最高的一个。
下面让我们讨论下方案的正确性：
由于<code>height[i]&gt;height[j]</code>，所以我们会执行j--，这样，我们认为对于<code>i &lt; m &lt; j</code>，area[m][j]已经没有必要去计算了，因为目前的最大值已经大于等于它了。其实因为：<code>area\[i]\[j] = (j - i) * height[j]</code>，而<code>area[m][j] = (j - m) * min(height[m], height[j]) &lt;= (j - m) * height[j] &lt; (j - i) * height[j] = area[i][j]</code>。
对于<code>i&lt;m&lt;j&lt;n&lt;len</code>的面积area[m][n]我们同样也是没有去计算的，同样是因为当前计算过的值肯定已经超过他了
<code>area[i][n] = (n - i) * height[n]</code>（此出利用了性质a），而<code>area[m][n] = (n - m) * min(height[m], height[n]) &lt;= (n - m) * height[n] &lt; (n - i) * height[n] = area[i][n]</code>，而此时的最大值肯定是&gt;= area[i][n]的，因此这些值也是不必要的了。另一边的分析也是如此，也就是说，我们采用上面的决策，漏掉的那些area的值确实不会比现在的最大值更大了，因此可以舍弃。</p>
<p>最终代码如下：</p>
<pre><code class="language-c++">class Solution {
public:
    int maxArea(vector&lt;int&gt;&amp; height) {
        int i = 0, j = height.size() - 1;
        int mx = 0;
        while (i &lt; j) {
            int t = (j - i) * min(height[i], height[j]);
            if (t &gt; mx) mx = t;
            height[i] &lt; height[j] ? i++ : j--;
        }
        return mx;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉搜索树与双向链表]]></title>
        <id>https://youngitachi.github.io/post/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao</id>
        <link href="https://youngitachi.github.io/post/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao">
        </link>
        <updated>2019-06-22T15:38:17.000Z</updated>
        <summary type="html"><![CDATA[<p>《剑指 offer》面试题36，将一个二叉搜索树在原地转换为双向链表。</p>
]]></summary>
        <content type="html"><![CDATA[<p>《剑指 offer》面试题36，将一个二叉搜索树在原地转换为双向链表。</p>
<!-- more -->
<p>此题考察中序遍历，但是其递归着实让我想了很长时间，因为陷入了一个苦难的境地，认为遍历左子树和右子树时是不一样的，导致无法写出正确的递归，即使在看了一遍解答之后仍然不能理解，但是借着解答中的，<strong>维护一个当前访问过的结点中最大的结点</strong>的思路，想到了采用中序遍历可以找到当前未访问结点的最小结点。当找到了这个最小结点时，很自然，已访问的最大值结点的后一个结点就是这个找到的未访问结点的最小值结点了，将当前访问过的最大值结点更新为这个找到的未访问的最小值结点，然后接着进行中序遍历，找到未访问结点中的最小值结点继续之前的操作。
代码如下：</p>
<pre><code class="language-java">public class Num36 {
    public static class Node {
        int val;
        Node left, right;

        public Node(int val) {
            this.val = val;
        }
    }

    static Node convertNode(Node curNode, Node lastMaxNode) {
        if (null == curNode) return null;

        if (null != curNode.left) {
            lastMaxNode = convertNode(curNode.left, lastMaxNode);
        }
        if (null != lastMaxNode) {
            lastMaxNode.right = curNode;
        }
        curNode.left = lastMaxNode;
        lastMaxNode = curNode;
        if (null != curNode.right) {
            convertNode(curNode.right, lastMaxNode);
        }
        return lastMaxNode;
    }
    static Node solve(Node root) {

        if (null == root) return null;
        convertNode(root, null);
        Node p = root;
        while (null != p.left) p = p.left;

        return p;

    }
   

    public static void main(String[] args) {
        Node node10 = new Node(10);
        Node node6 = new Node(6);
        Node node14 = new Node(14);
        Node node4 = new Node(4);
        Node node8 = new Node(8);
        Node node12 = new Node(12);
        Node node16 = new Node(16);

        node10.left = node6;
        node10.right = node14;

        node6.left = node4;
        node6.right = node8;

        node14.left = node12;
        node14.right = node16;

        Node p = solve(node10);
        while (null != p) {
            System.out.print(&quot; &quot; + p.val);
            p = p.right;
        }
    }
}
</code></pre>
<p>在调试代码的过程中，犯了一个致命的错误，说明我对引用的熟悉程度还远远不够啊，错误代码如下：</p>
<pre><code class="language-java">static void convertNode(Node curNode, Node lastMaxNode) {
        if (null == curNode) return ;

        if (null != curNode.left) {
            convertNode(curNode.left, lastMaxNode);
        }
        if (null != lastMaxNode) {
            lastMaxNode.right = curNode;
        }
        curNode.left = lastMaxNode;
        lastMaxNode = curNode;
        if (null != curNode.right) {
            convertNode(curNode.right, lastMaxNode);
        }
    }
</code></pre>
<p>比起之前的代码，差别在于，convertNode没有返回值，这里容易犯的一个错误在于：<code>认为lastMaxNode是一个引用，那么在函数内改变它的值后，那么调用该函数的地方其值也会做改变</code>。结合到本题，本题就是要在任何时候，通过lastMaxNode来维护当前已经访问的结点中的最大值结点，以为可以通过<code>lastMaxNode = curNode</code>这行代码来维护这个属性，没想到却是犯了个严重的错误，在调试的时候才发现根本没有生效。
其实原因也很简单，但是这种意识确实还不够深刻，非得想一下才能想到，而不是在写代码的时候自然而然就出来了。
没有生效的原因在于，代码不是去更改lastMaxNode对应的对象的值，而是去改变lastMaxNode指向。我们知道，java代码在传对象时，其实是copy了一份引用出来，假设原引用为a，copy出来的为b。那么，利用这个copy出来的引用b，通过调用b.setXxx这些方法，通过a.getXxx都是可以看到对应的更改的，但是如果是更改b的指向，其实这丝毫不会对a造成任何影响的。也正是因为如此，在原书中的c代码里面，作者使用的是指向指针的指针，而不是指针。说白了，如果a和b指向相同的对象，那么b最多能改点这个对象的值，对a的指向是没有任何影响的，但是若b是指向a的，那么b既可以修改a指向的这个对象的值，还能够更改a的指向。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://youngitachi.github.io/post/hello-gridea</id>
        <link href="https://youngitachi.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>